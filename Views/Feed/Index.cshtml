@model PaginatedList<SportsBettingTracker.Models.Bet>
@{
    ViewData["Title"] = "Feed";
}

<div class="container">
    <h1>@ViewData["Title"]</h1>

    @if (!Model.Any())
    {
        <div class="alert alert-info">
            No bets to display. Follow some users to see their public bets here!
        </div>
    }
    else
    {
        <div class="row">
            <div class="col-md-8">
                @foreach (var bet in Model)
                {
                    <div class="card mb-3">
                        <div class="card-header d-flex justify-content-between align-items-center">
                            <div>
                                <a asp-controller="Profile" asp-action="UserProfile" asp-route-id="@bet.UserId">@bet.User?.DisplayName</a>
                                <small class="text-muted ml-2">@bet.BetDate.ToString("MMM d, yyyy")</small>
                            </div>
                        </div>
                        <div class="card-body">
                            <h5 class="card-title">@bet.Match</h5>
                            <h6 class="card-subtitle mb-2 text-muted">@bet.SportLeague?.Name - @bet.BetType.ToString()</h6>
                            <p class="card-text">
                                Selection: @bet.BetSelection<br />
                                Odds: @bet.FormattedOdds<br />
                                Result: <span class="badge @(bet.Result == BetResult.WIN ? "bg-success" : bet.Result == BetResult.LOSS ? "bg-danger" : bet.Result == BetResult.PUSH ? "bg-warning" : "bg-secondary")">
                                    @bet.Result.ToString()
                                </span>
                                @if (bet.AmountWonLost.HasValue)
                                {
                                    <span class="@(bet.AmountWonLost >= 0 ? "text-success" : "text-danger")">(@bet.FormattedAmountWonLost)</span>
                                }
                            </p>
                            
                            <!-- Like/Dislike buttons -->
                            <div class="btn-group" role="group">
                                <button type="button" class="btn btn-outline-primary like-button" data-bet-id="@bet.Id" data-is-like="true">
                                    <i class="bi bi-hand-thumbs-up"></i>
                                    <span class="like-count">@bet.Likes.Count(l => l.IsLike)</span>
                                </button>
                                <button type="button" class="btn btn-outline-danger dislike-button" data-bet-id="@bet.Id" data-is-like="false">
                                    <i class="bi bi-hand-thumbs-down"></i>
                                    <span class="dislike-count">@bet.Likes.Count(l => !l.IsLike)</span>
                                </button>
                            </div>
                            
                            <!-- Comments section -->
                            <div class="mt-3">
                                <h6>Comments (@bet.Comments.Count)</h6>
                                <div class="comments-container" id="comments-@bet.Id">
                                    @foreach (var comment in bet.Comments.OrderByDescending(c => c.CreatedAt))
                                    {
                                        <div class="comment">
                                            <strong>@comment.User?.DisplayName</strong>
                                            <small class="text-muted">@comment.CreatedAt.ToString("MMM d, yyyy h:mm tt")</small>
                                            <p>@comment.Content</p>
                                        </div>
                                    }
                                </div>
                                <form class="comment-form mt-2" data-bet-id="@bet.Id">
                                    <div class="input-group">
                                        <input type="text" class="form-control comment-input" placeholder="Write a comment...">
                                        <button class="btn btn-primary" type="submit">Post</button>
                                    </div>
                                </form>
                            </div>
                        </div>
                    </div>
                }

                <!-- Pagination -->
                <nav>
                    <ul class="pagination">
                        @if (Model.HasPreviousPage)
                        {
                            <li class="page-item">
                                <a asp-action="Index" asp-route-pageNumber="@(Model.PageIndex - 1)" class="page-link">&laquo; Previous</a>
                            </li>
                        }
                        @if (Model.HasNextPage)
                        {
                            <li class="page-item">
                                <a asp-action="Index" asp-route-pageNumber="@(Model.PageIndex + 1)" class="page-link">Next &raquo;</a>
                            </li>
                        }
                    </ul>
                </nav>
            </div>
        </div>
    }
</div>

@section Scripts {
    <script>
        $(document).ready(function() {
            // Like/Dislike functionality
            $('.like-button, .dislike-button').click(function() {
                var button = $(this);
                var betId = button.data('bet-id');
                var isLike = button.data('is-like');
                
                $.post('/Feed/Like', {
                    id: betId,
                    isLike: isLike,
                    __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val()
                })
                .done(function(response) {
                    if (response.success) {
                        var card = button.closest('.card');
                        card.find('.like-count').text(response.likeCount);
                        card.find('.dislike-count').text(response.dislikeCount);
                    }
                });
            });

            // Comment functionality
            $('.comment-form').submit(function(e) {
                e.preventDefault();
                var form = $(this);
                var betId = form.data('bet-id');
                var input = form.find('.comment-input');
                var content = input.val();
                
                if (!content) return;
                
                $.post('/Feed/Comment', {
                    id: betId,
                    content: content,
                    __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val()
                })
                .done(function(response) {
                    if (response.success) {
                        var commentsContainer = $(`#comments-${betId}`);
                        var newComment = `
                            <div class="comment">
                                <strong>${response.comment.userName}</strong>
                                <small class="text-muted">${new Date(response.comment.createdAt).toLocaleString()}</small>
                                <p>${response.comment.content}</p>
                            </div>
                        `;
                        commentsContainer.prepend(newComment);
                        input.val('');
                    }
                });
            });
        });
    </script>
}
