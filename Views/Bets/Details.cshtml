@model SportsBettingTracker.Models.Bet

@{
    ViewData["Title"] = "Bet Details";
    // Count likes and dislikes
    int likesCount = Model.Likes.Count(l => l.IsLike);
    int dislikesCount = Model.Likes.Count(l => l.IsLike == false);
    
    // Check if current user has liked or disliked
    var currentUserId = User.Identity?.Name;
    var currentUserLike = Model.Likes.FirstOrDefault(l => l.UserId == currentUserId);
    string userReaction = currentUserLike == null ? "none" : (currentUserLike.IsLike ? "like" : "dislike");
}

<div class="container">
    <h1>Bet Details</h1>

    <div class="card mb-4">
        <div class="card-body">
            <div class="d-flex justify-content-between align-items-center mb-3">
                <h5 class="m-0">@Model.Match - @Model.BetSelection</h5>
                <span class="text-muted">Posted by <a asp-controller="Profile" asp-action="UserProfile" asp-route-id="@Model.UserId">@Model.User?.DisplayName</a></span>
            </div>
            
            <dl class="row">
                <dt class="col-sm-3">@Html.DisplayNameFor(model => model.BetDate)</dt>
                <dd class="col-sm-9">@Html.DisplayFor(model => model.BetDate)</dd>                
                
                <dt class="col-sm-3">@Html.DisplayNameFor(model => model.SportLeague)</dt>
                <dd class="col-sm-9">@Html.DisplayFor(model => model.SportLeague.Name)</dd>

                <dt class="col-sm-3">@Html.DisplayNameFor(model => model.BetType)</dt>
                <dd class="col-sm-9">@Html.DisplayFor(model => model.BetType)</dd>

                <dt class="col-sm-3">@Html.DisplayNameFor(model => model.Match)</dt>
                <dd class="col-sm-9">@Html.DisplayFor(model => model.Match)</dd>

                <dt class="col-sm-3">@Html.DisplayNameFor(model => model.BetSelection)</dt>
                <dd class="col-sm-9">@Html.DisplayFor(model => model.BetSelection)</dd>

                <dt class="col-sm-3">@Html.DisplayNameFor(model => model.Stake)</dt>
                <dd class="col-sm-9">$@Html.DisplayFor(model => model.Stake)</dd>

                <dt class="col-sm-3">@Html.DisplayNameFor(model => model.Odds)</dt>
                <dd class="col-sm-9">@Model.FormattedOdds</dd>

                <dt class="col-sm-3">@Html.DisplayNameFor(model => model.Result)</dt>
                <dd class="col-sm-9">
                    <span class="badge @(Model.Result == SportsBettingTracker.Models.BetResult.WIN ? "bg-success" : 
                                         Model.Result == SportsBettingTracker.Models.BetResult.LOSS ? "bg-danger" : 
                                         Model.Result == SportsBettingTracker.Models.BetResult.PUSH ? "bg-secondary" : "bg-warning")">
                        @Html.DisplayFor(model => model.Result)
                    </span>
                </dd>

                <dt class="col-sm-3">@Html.DisplayNameFor(model => model.AmountWonLost)</dt>
                <dd class="col-sm-9 @(Model.AmountWonLost.HasValue && Model.AmountWonLost.Value >= 0 ? "text-success" : "text-danger")">
                    @Model.FormattedAmountWonLost
                </dd>
            </dl>

            <div class="mt-4 border-top pt-3">
                <!-- Like/Dislike buttons -->
                <div class="d-flex gap-3 mb-3">
                    <form asp-action="Like" asp-route-id="@Model.Id" method="post" data-ajax="true" class="like-form">
                        @Html.AntiForgeryToken()
                        <input type="hidden" name="isLike" value="true" />
                        <button type="button" class="btn btn-sm @(userReaction == "like" ? "btn-primary" : "btn-outline-primary") like-button" data-reaction="like">
                            <i class="bi bi-hand-thumbs-up-fill"></i> <span class="likes-count">@likesCount</span>
                        </button>
                    </form>
                    <form asp-action="Like" asp-route-id="@Model.Id" method="post" data-ajax="true" class="dislike-form">
                        @Html.AntiForgeryToken()
                        <input type="hidden" name="isLike" value="false" />
                        <button type="button" class="btn btn-sm @(userReaction == "dislike" ? "btn-danger" : "btn-outline-danger") dislike-button" data-reaction="dislike">
                            <i class="bi bi-hand-thumbs-down-fill"></i> <span class="dislikes-count">@dislikesCount</span>
                        </button>
                    </form>
                </div>

                <!-- Comments section -->
                <h5 class="mb-3">Comments (@Model.Comments.Count)</h5>
                <div class="card">
                    <div class="card-body">
                        <!-- Comment form -->
                        <form asp-action="Comment" asp-route-id="@Model.Id" method="post" id="commentForm" class="mb-4">
                            @Html.AntiForgeryToken()
                            <div class="form-group">
                                <textarea name="content" class="form-control" placeholder="Add a comment..." rows="2"></textarea>
                            </div>
                            <div class="d-flex justify-content-end mt-2">
                                <button type="submit" class="btn btn-primary">Comment</button>
                            </div>
                        </form>
                        
                        <!-- Comments list -->
                        <div id="comments-list">
                            @foreach (var comment in Model.Comments.OrderByDescending(c => c.CreatedAt))
                            {
                                <div class="comment-item border-bottom py-3" data-comment-id="@comment.Id">
                                    <div class="d-flex justify-content-between">
                                        <div class="comment-author fw-bold">
                                            <a asp-controller="Profile" asp-action="UserProfile" asp-route-id="@comment.UserId">@comment.User?.DisplayName</a>
                                        </div>
                                        <div class="comment-time text-muted small">
                                            @comment.CreatedAt.ToString("MM/dd/yyyy HH:mm")
                                        </div>
                                    </div>
                                    <div class="comment-content mt-1">@comment.Content</div>
                                    @if (comment.UserId == currentUserId)
                                    {
                                        <div class="text-end mt-1">
                                            <button type="button" class="btn btn-sm btn-link text-danger delete-comment" data-comment-id="@comment.Id">Delete</button>
                                        </div>
                                    }
                                </div>
                            }
                            @if (!Model.Comments.Any())
                            {
                                <div class="text-center py-4 text-muted">Be the first to comment!</div>
                            }
                        </div>
                    </div>
                </div>
            </div>

            <div class="mt-3">
                @if (Model.UserId == currentUserId)
                {
                    <a asp-action="Edit" asp-route-id="@Model.Id" class="btn btn-primary">Edit</a>
                }
                <a asp-controller="Profile" asp-action="UserProfile" asp-route-id="@Model.UserId" class="btn btn-secondary">Back to Profile</a>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        $(function() {
            // Like/dislike buttons
            $('.like-button, .dislike-button').on('click', function() {
                const form = $(this).closest('form');
                const isLike = $(this).data('reaction') === 'like';
                
                $.ajax({
                    url: form.attr('action'),
                    type: 'POST',
                    data: form.serialize(),
                    success: function(response) {
                        if (response.success) {
                            // Update counts
                            $('.likes-count').text(response.likes);
                            $('.dislikes-count').text(response.dislikes);
                            
                            // Update button styles
                            if (response.currentUserReaction === 'like') {
                                $('.like-button').removeClass('btn-outline-primary').addClass('btn-primary');
                                $('.dislike-button').removeClass('btn-danger').addClass('btn-outline-danger');
                            } else if (response.currentUserReaction === 'dislike') {
                                $('.like-button').removeClass('btn-primary').addClass('btn-outline-primary');
                                $('.dislike-button').removeClass('btn-outline-danger').addClass('btn-danger');
                            } else {
                                $('.like-button').removeClass('btn-primary').addClass('btn-outline-primary');
                                $('.dislike-button').removeClass('btn-danger').addClass('btn-outline-danger');
                            }
                        }
                    }
                });
            });
            
            // Comment form
            $('#commentForm').on('submit', function(e) {
                e.preventDefault();
                const form = $(this);
                const textarea = form.find('textarea');
                
                if (!textarea.val().trim()) {
                    return;
                }
                
                $.ajax({
                    url: form.attr('action'),
                    type: 'POST',
                    data: form.serialize(),
                    success: function(response) {
                        if (response.success) {
                            // Clear the form
                            textarea.val('');
                            
                            // Add the new comment to the list
                            const comment = response.comment;
                            const commentHtml = `
                                <div class="comment-item border-bottom py-3" data-comment-id="${comment.id}">
                                    <div class="d-flex justify-content-between">
                                        <div class="comment-author fw-bold">
                                            <a href="/Profile/UserProfile/${comment.user.id}">${comment.user.displayName}</a>
                                        </div>
                                        <div class="comment-time text-muted small">
                                            ${comment.createdAt}
                                        </div>
                                    </div>
                                    <div class="comment-content mt-1">${comment.content}</div>
                                    <div class="text-end mt-1">
                                        <button type="button" class="btn btn-sm btn-link text-danger delete-comment" data-comment-id="${comment.id}">Delete</button>
                                    </div>
                                </div>
                            `;
                            
                            // Remove the "be the first to comment" message if it exists
                            if ($('#comments-list .text-center').length) {
                                $('#comments-list').empty();
                            }
                            
                            // Add the new comment at the top
                            $('#comments-list').prepend(commentHtml);
                        }
                    }
                });
            });
            
            // Delete comment
            $(document).on('click', '.delete-comment', function() {
                if (!confirm('Are you sure you want to delete this comment?')) {
                    return;
                }
                
                const commentId = $(this).data('comment-id');
                const commentEl = $(this).closest('.comment-item');
                
                $.ajax({
                    url: '@Url.Action("DeleteComment")/' + commentId,
                    type: 'DELETE',
                    headers: {
                        'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                    },
                    success: function(response) {
                        if (response.success) {
                            commentEl.fadeOut('fast', function() {
                                $(this).remove();
                                
                                // If there are no more comments, show the "be the first to comment" message
                                if ($('#comments-list .comment-item').length === 0) {
                                    $('#comments-list').html('<div class="text-center py-4 text-muted">Be the first to comment!</div>');
                                }
                            });
                        }
                    }
                });
            });
        });
    </script>
}
