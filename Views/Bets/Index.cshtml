@model SportsBettingTracker.ViewModels.PaginatedList<SportsBettingTracker.Models.Bet>

@{
    ViewData["Title"] = "Bets";
}

<div class="container">    <div class="d-flex justify-content-between align-items-center mb-4">
        <h1>Bets</h1>
        <div>
            <div class="btn-group me-2">
                <a asp-action="Create" class="btn btn-primary"><i class="bi bi-plus"></i> Add Bet</a>
                <button type="button" class="btn btn-primary dropdown-toggle dropdown-toggle-split" data-bs-toggle="dropdown" aria-expanded="false">
                    <span class="visually-hidden">Toggle Dropdown</span>
                </button>
                <ul class="dropdown-menu dropdown-menu-end">
                    <li><a class="dropdown-item" asp-action="ImportCsv">Import from CSV</a></li>
                </ul>
            </div>
            <div class="btn-group">
                <a asp-action="ExportCsv" class="btn btn-outline-secondary">Export</a>
                <button type="button" class="btn btn-outline-secondary dropdown-toggle dropdown-toggle-split" data-bs-toggle="dropdown" aria-expanded="false">
                    <span class="visually-hidden">Toggle Dropdown</span>
                </button>
                <ul class="dropdown-menu dropdown-menu-end">
                    <li><a class="dropdown-item" asp-action="ExportCsv">Export as CSV</a></li>
                    <li><a class="dropdown-item disabled" href="#">Export as PDF</a></li>
                </ul>
            </div>
        </div>
    </div>

    @if (TempData["Success"] != null)
    {
        <div class="alert alert-success">
            @TempData["Success"]
        </div>
    }
    
    @if (TempData["Warning"] != null)
    {
        <div class="alert alert-warning">
            @TempData["Warning"]
        </div>
    }
    
    @if (TempData["Info"] != null)
    {
        <div class="alert alert-info">
            @TempData["Info"]
        </div>
    }
    
    @if (TempData["Error"] != null)
    {
        <div class="alert alert-danger">
            @TempData["Error"]
        </div>
    }
    
    @if (TempData["Debug"] != null)
    {
        <div class="alert alert-secondary">
            <strong>Debug Info:</strong>
            <div>@TempData["Debug"]</div>
        </div>
    }
    
    @if (TempData["ImportErrors"] != null)
    {
        <div class="alert alert-danger">
            <strong>Import Errors:</strong>
            <div>@Html.Raw(TempData["ImportErrors"])</div>
        </div>
    }

    <div class="card">
        <div class="card-body">
            <form asp-action="Index" method="get" class="mb-4">            <div class="input-group">
                    <input type="text" name="searchString" value="@ViewData["CurrentFilter"]" class="form-control" placeholder="Search by match, bet selection or sport...">
                    <button type="submit" class="btn btn-outline-secondary">Search</button>
                    @if (ViewData["CurrentFilter"]?.ToString() != null)
                    {
                        <a asp-action="Index" class="btn btn-outline-secondary">Clear</a>
                    }
                </div>
            </form>
            
            @Html.AntiForgeryToken()
            
            <div class="table-responsive">
                <table class="table table-hover">
                    <thead>
                        <tr>
                            <th>
                                <a asp-action="Index" asp-route-sortOrder="@ViewData["DateSortParm"]">Date</a>
                            </th>
                            <th>
                                <a asp-action="Index" asp-route-sortOrder="@ViewData["SportSortParm"]">Sport/League</a>
                            </th>
                            <th>Match</th>
                            <th>Selection</th>
                            <th>Stake</th>
                            <th>Odds</th>
                            <th>
                                <a asp-action="Index" asp-route-sortOrder="@ViewData["ResultSortParm"]">Result</a>
                            </th>
                            <th>
                                <a asp-action="Index" asp-route-sortOrder="@ViewData["AmountSortParm"]">Amount</a>
                            </th>
                            <th>Actions</th>
                        </tr>
                    </thead>                    <tbody>
                        @foreach (var item in Model)
                        {
                            <tr data-bet-id="@item.Id">                                <td class="editable" data-field="BetDate" data-type="date">
                                    <span class="display-value">@item.BetDate.ToShortDateString()</span>
                                    <input type="date" class="form-control edit-control d-none" value="@item.BetDate.ToString("yyyy-MM-dd")" />
                                </td>
                                <td class="editable" data-field="SportLeagueId" data-type="select">
                                    <span class="display-value">@(item.SportLeague?.Name ?? "Unknown")</span>
                                    <select class="form-control edit-control d-none">
                                        @foreach (var sportLeague in ViewBag.SportLeagues)
                                        {
                                            if (item.SportLeagueId == sportLeague.Id)
                                            {
                                                <option value="@sportLeague.Id" selected>@sportLeague.Name</option>
                                            }
                                            else
                                            {
                                                <option value="@sportLeague.Id">@sportLeague.Name</option>
                                            }
                                        }
                                    </select>
                                </td>
                                <td class="editable" data-field="Match" data-type="text">
                                    <span class="display-value">@item.Match</span>
                                    <input type="text" class="form-control edit-control d-none" value="@item.Match" />
                                </td>
                                <td class="editable" data-field="BetSelection" data-type="text">
                                    <span class="display-value">@item.BetSelection</span>
                                    <input type="text" class="form-control edit-control d-none" value="@item.BetSelection" />
                                </td>
                                <td class="editable" data-field="Stake" data-type="number">
                                    <span class="display-value">$@item.Stake.ToString("F2")</span>
                                    <input type="text" class="form-control edit-control d-none" value="@item.Stake.ToString("F2")" />
                                </td>
                                <td class="editable" data-field="Odds" data-type="number">
                                    <span class="display-value">@item.FormattedOdds</span>
                                    <input type="text" class="form-control edit-control d-none" value="@item.Odds" />
                                </td>
                                <td class="editable" data-field="Result" data-type="select">
                                    <span class="badge @(item.Result == SportsBettingTracker.Models.BetResult.WIN ? "bg-success" : 
                                                      item.Result == SportsBettingTracker.Models.BetResult.LOSS ? "bg-danger" :
                                                      item.Result == SportsBettingTracker.Models.BetResult.PUSH ? "bg-secondary" : "bg-warning") display-value">
                                        @item.Result
                                    </span>                                    <select class="form-control edit-control d-none">
                                        @if (item.Result == SportsBettingTracker.Models.BetResult.WIN)
                                        {
                                            <option value="WIN" selected>WIN</option>
                                        }
                                        else
                                        {
                                            <option value="WIN">WIN</option>
                                        }
                                        
                                        @if (item.Result == SportsBettingTracker.Models.BetResult.LOSS)
                                        {
                                            <option value="LOSS" selected>LOSS</option>
                                        }
                                        else
                                        {
                                            <option value="LOSS">LOSS</option>
                                        }
                                        
                                        @if (item.Result == SportsBettingTracker.Models.BetResult.PUSH)
                                        {
                                            <option value="PUSH" selected>PUSH</option>
                                        }
                                        else
                                        {
                                            <option value="PUSH">PUSH</option>
                                        }
                                        
                                        @if (item.Result == SportsBettingTracker.Models.BetResult.PENDING)
                                        {
                                            <option value="PENDING" selected>PENDING</option>
                                        }
                                        else
                                        {
                                            <option value="PENDING">PENDING</option>
                                        }
                                    </select>
                                </td>
                                <td class="amount-won-lost">@item.FormattedAmountWonLost</td>
                                <td>
                                    <div class="btn-group btn-group-sm">
                                        <a asp-action="Edit" asp-route-id="@item.Id" class="btn btn-outline-primary">Edit</a>
                                        <a asp-action="Details" asp-route-id="@item.Id" class="btn btn-outline-secondary">Details</a>
                                        <a asp-action="Delete" asp-route-id="@item.Id" class="btn btn-outline-danger">Delete</a>
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
            
            <div class="d-flex justify-content-between align-items-center mt-3">
                <div>
                    @if (Model.Count > 0)
                    {
                        <span>Showing @Model.FirstItemIndex-@Model.LastItemIndex of @Model.TotalItems items</span>
                    }
                    else
                    {
                        <span>No bets found</span>
                    }
                </div>
                <div>
                    <a asp-action="Index"
                       asp-route-sortOrder="@ViewData["CurrentSort"]"
                       asp-route-pageNumber="@(Model.PageIndex - 1)"
                       asp-route-currentFilter="@ViewData["CurrentFilter"]"
                       class="btn btn-outline-secondary @(Model.HasPreviousPage ? "" : "disabled")">
                        Previous
                    </a>
                    <a asp-action="Index"
                       asp-route-sortOrder="@ViewData["CurrentSort"]"
                       asp-route-pageNumber="@(Model.PageIndex + 1)"
                       asp-route-currentFilter="@ViewData["CurrentFilter"]"
                       class="btn btn-outline-secondary @(Model.HasNextPage ? "" : "disabled")">
                        Next
                    </a>
                </div>
            </div>        </div>
    </div>
</div>

@section Scripts {
    <script>
        $(document).ready(function() {
            // Handle double-click on editable cells
            $('.editable').dblclick(function() {
                // Check if another cell is already being edited
                if ($('.edit-mode').length > 0) {
                    // If so, cancel that edit first
                    cancelEdit();
                }
                
                // Enter edit mode for this cell
                $(this).addClass('edit-mode');
                $(this).find('.display-value').addClass('d-none');
                $(this).find('.edit-control').removeClass('d-none').focus();
            });
            
            // Handle Enter key press to save
            $('.edit-control').on('keyup', function(e) {
                if (e.key === 'Enter') {
                    saveEdit($(this).closest('.editable'));
                } else if (e.key === 'Escape') {
                    cancelEdit();
                }
            });
            
            // Handle click outside to save
            $(document).on('click', function(e) {
                if (!$(e.target).closest('.edit-mode').length && $('.edit-mode').length > 0) {
                    saveEdit($('.edit-mode'));
                }
            });
            
            // Handle select control change
            $('select.edit-control').on('change', function() {
                saveEdit($(this).closest('.editable'));
            });
            
            // Handle date control change
            $('input[type="date"].edit-control').on('change', function() {
                saveEdit($(this).closest('.editable'));
            });
            
            function saveEdit(cell) {
                const betId = cell.closest('tr').data('bet-id');
                const field = cell.data('field');
                const editControl = cell.find('.edit-control');
                const value = editControl.val();
                const displayValue = cell.find('.display-value');
                const originalValue = displayValue.text();
                
                // Show loading state
                displayValue.html('<i class="spinner-border spinner-border-sm" role="status"></i>');
                
                // Send AJAX request to save changes
                $.ajax({
                    url: '@Url.Action("QuickEdit")',
                    type: 'POST',
                    data: {
                        id: betId,
                        field: field,
                        value: value,
                        __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val()
                    },
                    success: function(response) {
                        if (response.success) {
                            // Update the displayed value with formatted value
                            if (field === 'Result') {
                                displayValue.text(response.formattedValue);
                                // Update the badge class
                                displayValue.removeClass('bg-success bg-danger bg-warning bg-secondary')
                                           .addClass(response.resultClass);
                            } else {
                                displayValue.text(response.formattedValue);
                            }
                            
                            // Update the Amount Won/Lost column if necessary
                            if (['BetDate', 'Stake', 'Odds', 'Result'].includes(field)) {
                                cell.closest('tr').find('.amount-won-lost').text(response.amountWonLost);
                            }
                        } else {
                            // Show error and revert to original value
                            alert(response.message);
                            displayValue.text(originalValue);
                        }
                    },
                    error: function() {
                        alert('An error occurred while saving changes.');
                        displayValue.text(originalValue);
                    },
                    complete: function() {
                        exitEditMode(cell);
                    }
                });
            }
            
            function cancelEdit() {
                exitEditMode($('.edit-mode'));
            }
            
            function exitEditMode(cell) {
                cell.removeClass('edit-mode');
                cell.find('.display-value').removeClass('d-none');
                cell.find('.edit-control').addClass('d-none');
            }
        });
    </script>
}
