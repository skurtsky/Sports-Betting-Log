@model SportsBettingTracker.ViewModels.DashboardViewModel
@using SportsBettingTracker.ViewModels
@{
    ViewData["Title"] = "Dashboard";
}

<div class="container">
    <div class="mb-4">
        <h1>Sports Betting Dashboard</h1>
        <form id="dateRangeForm" asp-action="Index" method="get" class="d-flex align-items-center">
            <div class="me-3">
                <label for="dateRange" class="form-label">Date Range:</label>
                <select id="dateRange" name="dateRange" class="form-select" onchange="this.form.submit()">
                    @foreach (var range in Model.AvailableDateRanges)
                    {
                        <option value="@range.Key" selected="@(range.Key == Model.DateRange)">@range.Value</option>
                    }
                </select>
            </div>
            <div>
                <p class="mb-0">Showing data from <strong>@Model.StartDate.ToString("MM/dd/yyyy")</strong> to <strong>@Model.EndDate.ToString("MM/dd/yyyy")</strong></p>
            </div>
        </form>
    </div>    <div class="row mb-4">
        <div class="col-md-3">
            <div class="card bg-light">
                <div class="card-body">
                    <h5 class="card-title">Total Bets</h5>
                    <p class="card-text fs-2">@Model.TotalBets</p>
                    <p class="card-text">(@Model.TotalWins W - @Model.TotalLosses L - @Model.TotalPushes P)</p>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card bg-success text-white">
                <div class="card-body">
                    <h5 class="card-title">Win Rate</h5>
                    <p class="card-text fs-2">@Model.FormattedWinPercentage</p>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card @(Model.NetProfit >= 0 ? "bg-success" : "bg-danger") text-white">
                <div class="card-body">
                    <h5 class="card-title">Net Profit</h5>
                    <p class="card-text fs-2">@Model.FormattedNetProfit</p>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card bg-info text-white">
                <div class="card-body">
                    <h5 class="card-title">ROI</h5>
                    <p class="card-text fs-2">@Model.FormattedROI</p>
                </div>
            </div>
        </div>
    </div>
    
    <div class="row mb-4">
        <div class="col-md-4">
            <div class="card">
                <div class="card-header">
                    <h5>Current Streak</h5>
                </div>
                <div class="card-body">
                    <p class="card-text fs-2">@Model.FormattedStreak</p>
                </div>
            </div>
        </div>
        <div class="col-md-4">
            <div class="card">
                <div class="card-header">
                    <h5>Longest Win Streak</h5>
                </div>
                <div class="card-body">
                    <p class="card-text fs-2">@Model.FormattedLongestWinStreak</p>
                </div>
            </div>
        </div>
        <div class="col-md-4">                <div class="card">
                <div class="card-header">
                    <h5>Pending Bets</h5>
                </div>
                <div class="card-body">
                    <a href="@Url.Action("Index", "Bets", new { resultFilter = "PENDING" })" class="text-decoration-none">
                        <p class="card-text fs-2">@Model.PendingBets.Count()</p>
                    </a>
                </div>
            </div>
        </div>    </div>

    <div class="row mb-4">
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <h5>Daily Profit</h5>
                </div>
                <div class="card-body">
                    <canvas id="dailyProfitChart" height="300"></canvas>
                </div>
            </div>
        </div>
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <h5>Cumulative Profit</h5>
                </div>
                <div class="card-body">
                    <canvas id="cumulativeProfitChart" height="300"></canvas>
                </div>
            </div>
        </div>    </div>

    @if (Model.TopRecommendations != null && Model.TopRecommendations.Any())
    {
        <div class="row mb-4">
            <div class="col-md-12">
                <div class="card">
                    <div class="card-header bg-primary text-white">
                        <div class="d-flex justify-content-between align-items-center">
                            <h5 class="mb-0"><i class="bi bi-lightbulb"></i> Smart Betting Recommendations</h5>
                            <a href="@Url.Action("Index", "Recommendations")" class="btn btn-sm btn-light">See All <i class="bi bi-arrow-right"></i></a>
                        </div>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            @foreach (var recommendation in Model.TopRecommendations)
                            {
                                <div class="col-md-6 mb-3">
                                    <div class="card h-100">
                                        <div class="card-body">                                            <div class="d-flex align-items-center mb-2">                                                @{
                                                    switch (recommendation.Type)
                                                    {
                                                        case RecommendationTypeViewModel.SportLeague:
                                                            <text><i class="bi bi-trophy text-success me-2 fs-4"></i>
                                                            <h5 class="card-title mb-0">@recommendation.SportLeagueName</h5></text>
                                                            break;
                                                        case RecommendationTypeViewModel.BetType:
                                                            <text><i class="bi bi-diagram-3 text-primary me-2 fs-4"></i>
                                                            <h5 class="card-title mb-0">@recommendation.BetTypeName Bets</h5></text>
                                                            break;
                                                        case RecommendationTypeViewModel.Team:
                                                            <text><i class="bi bi-people text-info me-2 fs-4"></i>
                                                            <h5 class="card-title mb-0">@recommendation.TeamName</h5></text>
                                                            break;
                                                        case RecommendationTypeViewModel.BetSize:
                                                            <text><i class="bi bi-cash text-warning me-2 fs-4"></i>
                                                            <h5 class="card-title mb-0">Bet Sizing</h5></text>
                                                            break;
                                                    }
                                                }
                                            </div>
                                            
                                            <div class="progress mb-3">
                                                <div class="progress-bar bg-success" 
                                                     role="progressbar" 
                                                     style="width: @(recommendation.Confidence * 100)%;" 
                                                     aria-valuenow="@(recommendation.Confidence * 100)" 
                                                     aria-valuemin="0" 
                                                     aria-valuemax="100">
                                                    @((recommendation.Confidence * 100).ToString("F0"))% Confidence
                                                </div>
                                            </div>
                                            
                                            <p class="text-muted small mb-2">@recommendation.Reasoning</p>
                                            <p class="fw-bold mb-0">@recommendation.SuggestedAction</p>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }

    <div class="row mb-4">
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <h5>Profit by Sport/League</h5>
                </div>
                <div class="card-body">
                    <div class="table-responsive">
                        <table class="table table-striped">
                            <thead>
                                <tr>
                                    <th>Sport/League</th>
                                    <th>Total Bets</th>
                                    <th>Win-Loss</th>
                                    <th>Win Rate</th>
                                    <th>Net Profit</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var sport in Model.ProfitBySport)
                                {
                                    <tr>
                                        <td>@sport.SportLeagueName</td>
                                        <td>@sport.TotalBets</td>
                                        <td>@sport.WinningBets-@(sport.TotalBets - sport.WinningBets)</td>
                                        <td>@sport.FormattedWinPercentage</td>
                                        <td class="@(sport.NetProfit >= 0 ? "text-success" : "text-danger")">@sport.FormattedNetProfit</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <h5>Profit by Bet Type</h5>
                </div>
                <div class="card-body">
                    <div class="table-responsive">
                        <table class="table table-striped">
                            <thead>
                                <tr>
                                    <th>Bet Type</th>
                                    <th>Total Bets</th>
                                    <th>Win-Loss</th>
                                    <th>Win Rate</th>
                                    <th>Net Profit</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var betType in Model.ProfitByBetType)
                                {
                                    <tr>
                                        <td>@betType.BetType</td>
                                        <td>@betType.TotalBets</td>
                                        <td>@betType.WinningBets-@(betType.TotalBets - betType.WinningBets)</td>
                                        <td>@betType.FormattedWinPercentage</td>
                                        <td class="@(betType.NetProfit >= 0 ? "text-success" : "text-danger")">@betType.FormattedNetProfit</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>    <div class="row mb-4">
        <!-- Pending Bets Widget -->
        <div class="col-12">
            <partial name="_PendingBetsWidget" model="Model.PendingBets" />
        </div>
    </div>
    
    <!-- Futures Bets Widget -->
    <div class="row mb-4">
        <div class="col-12">
            <partial name="_FutureBetsWidget" model="Model.FutureBets" />
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Get the chart data from the model
            const chartLabels = @Html.Raw(Json.Serialize(Model.ChartLabels));
            const dailyProfitData = @Html.Raw(Json.Serialize(Model.ChartData));
            const cumulativeProfitData = @Html.Raw(Json.Serialize(Model.CumulativeChartData));
            
            // Create the daily profit chart
            const dailyCtx = document.getElementById('dailyProfitChart').getContext('2d');
            const dailyChart = new Chart(dailyCtx, {
                type: 'bar',
                data: {
                    labels: chartLabels,
                    datasets: [{
                        label: 'Daily Profit ($)',
                        data: dailyProfitData,
                        backgroundColor: dailyProfitData.map(value => value >= 0 ? 'rgba(40, 167, 69, 0.7)' : 'rgba(220, 53, 69, 0.7)'),
                        borderColor: dailyProfitData.map(value => value >= 0 ? 'rgb(40, 167, 69)' : 'rgb(220, 53, 69)'),
                        borderWidth: 1
                    }]
                },
                options: {
                    maintainAspectRatio: false,
                    scales: {
                        y: {
                            beginAtZero: false,
                            grid: {
                                color: 'rgba(0, 0, 0, 0.1)'
                            }
                        },
                        x: {
                            grid: {
                                display: false
                            }
                        }
                    }
                }
            });
            
            // Create the cumulative profit chart
            const cumulativeCtx = document.getElementById('cumulativeProfitChart').getContext('2d');
            const cumulativeChart = new Chart(cumulativeCtx, {
                type: 'line',
                data: {
                    labels: chartLabels,
                    datasets: [{
                        label: 'Cumulative Profit ($)',
                        data: cumulativeProfitData,
                        borderColor: cumulativeProfitData[cumulativeProfitData.length - 1] >= 0 ? '#28a745' : '#dc3545',
                        backgroundColor: 'rgba(0, 0, 0, 0.1)',
                        borderWidth: 2,
                        fill: true
                    }]
                },
                options: {
                    maintainAspectRatio: false,
                    scales: {
                        y: {
                            beginAtZero: false,
                            grid: {
                                color: 'rgba(0, 0, 0, 0.1)'
                            }
                        },
                        x: {
                            grid: {
                                display: false
                            }
                        }
                    },
                    plugins: {
                        legend: {
                            display: false
                        }
                    }
                }
            });
        });
    </script>
}
